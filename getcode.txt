// File: accounts/__init__.py

// File: accounts/admin.py

// File: accounts/api/search.py

// File: accounts/apps.py
from django.apps import AppConfig

class AccountsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'accounts'

// File: accounts/forms.py
from django import forms
from django.contrib.auth.forms import AuthenticationForm, UserCreationForm
from .models import User

class RegisterForm(UserCreationForm):
    pet_name = forms.CharField(required=True, label="What is your pet's name?")
    first_love = forms.CharField(required=True, label="Who was your first love?")
    favorite_color = forms.CharField(required=False, label="What is your favorite color?")

    class Meta:
        model = User
        fields = [
            'id_number', 'full_name', 'phone_number', 'age',
            'pet_name', 'first_love', 'favorite_color',
            'password1', 'password2'
        ]
        labels = {'id_number': 'ID Number'}

    def clean(self):
        cleaned = super().clean()
        answers = [
            bool(cleaned.get('pet_name')),
            bool(cleaned.get('first_love')),
            bool(cleaned.get('favorite_color')),
        ]
        if sum(answers) < 2:
            raise forms.ValidationError("Please answer at least two security questions.")
        return cleaned

class LoginForm(AuthenticationForm):
    username = forms.CharField(label='ID Number')

class UpdatePersonalInfoForm(forms.ModelForm):
    class Meta:
        model = User
        fields = ['phone_number', 'age']

// File: accounts/managers.py
from django.contrib.auth.base_user import BaseUserManager

class UserManager(BaseUserManager):
    def create_user(self, id_number, phone_number, age, full_name, password=None, **extra_fields):
        if not id_number:
            raise ValueError("Users must have an ID number.")
        user = self.model(
            id_number=id_number,
            phone_number=phone_number,
            age=age,
            full_name=full_name,
            **extra_fields
        )
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, id_number, phone_number, age, full_name, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        if extra_fields.get('is_staff') is not True:
            raise ValueError("Superuser must have is_staff=True.")
        if extra_fields.get('is_superuser') is not True:
            raise ValueError("Superuser must have is_superuser=True.")
        return self.create_user(id_number, phone_number, age, full_name, password, **extra_fields)

// File: accounts/migrations/0001_initial.py
# Generated by Django 3.2.25 on 2025-03-21 15:56

from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id_number', models.CharField(max_length=50, unique=True)),
                ('full_name', models.CharField(blank=True, max_length=150)),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('age', models.PositiveIntegerField(blank=True, null=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]

// File: accounts/migrations/0002_auto_20250321_1607.py
# Generated by Django 3.2.25 on 2025-03-21 16:07

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='user',
            name='favorite_color',
            field=models.CharField(blank=True, max_length=50, null=True),
        ),
        migrations.AddField(
            model_name='user',
            name='first_love',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='user',
            name='pet_name',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
    ]

// File: accounts/migrations/__init__.py

// File: accounts/models.py
from django.db import models
from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin
from django.utils import timezone
from .managers import UserManager

class User(AbstractBaseUser, PermissionsMixin):
    id_number = models.CharField(max_length=50, unique=True)
    full_name = models.CharField(max_length=150, blank=True)
    phone_number = models.CharField(max_length=20, blank=True)
    age = models.PositiveIntegerField(null=True, blank=True)
    pet_name = models.CharField(max_length=100, blank=True, null=True)
    first_love = models.CharField(max_length=100, blank=True, null=True)
    favorite_color = models.CharField(max_length=50, blank=True, null=True)
    date_joined = models.DateTimeField(default=timezone.now)
    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)

    objects = UserManager()

    USERNAME_FIELD = 'id_number'
    REQUIRED_FIELDS = ['phone_number', 'age', 'full_name']

    def __str__(self):
        return self.id_number

// File: accounts/tests.py

// File: accounts/urls.py
from django.urls import path
from . import views

app_name = 'accounts'

urlpatterns = [
    path('register/', views.register_view, name='register'),
    path('login/', views.login_view, name='login'),
    path('', views.login_view, name='index'),
    path('logout/', views.logout_view, name='logout'),
    path('main_menu/', views.main_menu_view, name='main_menu'),
    path('edit_personal_info/', views.edit_personal_info_view, name='edit_personal_info'),
    path('change_password/', views.change_password_view, name='change_password'),
]

// File: accounts/views.py
from django.shortcuts import render, redirect
from django.contrib.auth import login, logout
from django.contrib.auth.decorators import login_required
from django.contrib.auth.forms import PasswordChangeForm
from django.contrib.auth import update_session_auth_hash
from .forms import RegisterForm, LoginForm, UpdatePersonalInfoForm

def index_view(request):
    return redirect('accounts:login')

def register_view(request):
    if request.method == 'POST':
        form = RegisterForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            return redirect('accounts:main_menu')
    else:
        form = RegisterForm()
    return render(request, 'register.html', {'form': form})

def login_view(request):
    if request.method == 'POST':
        form = LoginForm(request, data=request.POST)
        if form.is_valid():
            login(request, form.get_user())
            return redirect('accounts:main_menu')
    else:
        form = LoginForm()
    return render(request, 'login.html', {'form': form, 'register_form': RegisterForm()})

@login_required
def main_menu_view(request):
    return render(request, 'main_menu.html')

@login_required
def edit_personal_info_view(request):
    if request.method == 'POST':
        form = UpdatePersonalInfoForm(request.POST, instance=request.user)
        if form.is_valid():
            form.save()
            return redirect('accounts:main_menu')
    else:
        form = UpdatePersonalInfoForm(instance=request.user)
    return render(request, 'edit_personal_info.html', {'form': form})

@login_required
def change_password_view(request):
    if request.method == 'POST':
        form = PasswordChangeForm(data=request.POST, user=request.user)
        if form.is_valid():
            form.save()
            update_session_auth_hash(request, request.user)
            return redirect('accounts:main_menu')
    else:
        form = PasswordChangeForm(user=request.user)
    return render(request, 'change_password.html', {'form': form})

def logout_view(request):
    logout(request)
    return redirect('accounts:login')

// File: backend/__init__.py

// File: backend/admin.py

// File: backend/settings.py
import os
from pathlib import Path
from celery.schedules import crontab

BASE_DIR = Path(__file__).resolve().parent.parent

DEMO_MODE = os.getenv('DEMO_MODE') == 'True'

SECRET_KEY = 'a-strong-secret-key'
DEBUG = True
ALLOWED_HOSTS = []

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'crispy_forms',
    'crispy_bootstrap5',

    
    'accounts',
    'habits',
]

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

STATICFILES_DIRS = [ BASE_DIR / "static" ]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_DB', 'habit_db'),
        'USER': os.environ.get('POSTGRES_USER', 'habit_user'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', 'habit_password'),
        'HOST': os.environ.get('POSTGRES_HOST', 'db'),
        'PORT': os.environ.get('POSTGRES_PORT', '5432'),
    }
}

AUTH_USER_MODEL = 'accounts.User'

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

if DEMO_MODE:
    CELERY_BEAT_SCHEDULE = {
        # Fires 1 minute after habit creation
        'demo_initial_reminder': {
            'task': 'habits.tasks.send_notification',
            'schedule': crontab(minute='*/1'),
            'args': ('Welcome to your new habit!',)
        },
        # Fires 2 minutes in → Daily Reminder
        'demo_daily_reminder': {
            'task': 'habits.tasks.send_notification',
            'schedule': crontab(minute='*/2'),
            'args': ('Daily Check‑In: Keep going!',)
        },
        # Fires 3 minutes in → Weekly Reminder
        'demo_weekly_reminder': {
            'task': 'habits.tasks.send_notification',
            'schedule': crontab(minute='*/3'),
            'args': ('Weekly Motivation: You’re doing great!',)
        },
        # Fires 4 minutes in → Upcoming Challenge
        'demo_challenge': {
            'task': 'habits.tasks.send_notification',
            'schedule': crontab(minute='*/4'),
            'args': ('Next badge in 1 day — keep your streak alive!',)
        },
        # Fires 5 minutes in → Badge Earned
        'demo_badge': {
            'task': 'habits.tasks.send_notification',
            'schedule': crontab(minute='*/5'),
            'args': ('🏅 Congrats — Silver Badge Unlocked!',)
        },
        # Fires 6 minutes in → Streak Broken
        'demo_streak_break': {
            'task': 'habits.tasks.send_notification',
            'schedule': crontab(minute='*/6'),
            'args': ('⚠️ Oops — your streak reset to 0',)
        },
    }

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = '/static/'
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

// File: backend/urls.py
from django.contrib import admin
from django.urls import path, include
from accounts import views as accounts_views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', accounts_views.login_view, name='root'),
    path('accounts/', include('accounts.urls', namespace='accounts')),
    path('habits/', include('habits.urls', namespace='habits')),
]

// File: backend/wsgi.py
import os
from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
application = get_wsgi_application()

// File: habits/apps.py
from django.apps import AppConfig

class HabitsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'habits'

// File: habits/asgi.py
import os
from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'habits.settings')
application = get_asgi_application()

// File: habits/forms.py
from django import forms
from .models import Habit

class HabitForm(forms.ModelForm):
    class Meta:
        model = Habit
        fields = ['name','timeline','motivational_reminder','insights_method']

class HabitRecordForm(forms.Form):
    def __init__(self, *args, metrics=None, **kwargs):
        super().__init__(*args, **kwargs)
        for key in metrics.keys():
            self.fields[key] = forms.FloatField(required=False, label=key.replace('_',' ').title())

// File: habits/migrations/0001_initial.py
# Generated by Django 3.2.25 on 2025-03-21 18:55

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Habit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('timeline', models.CharField(choices=[('1', '1 Month'), ('2', '2 Months')], max_length=1)),
                ('motivational_reminder', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly')], max_length=6)),
                ('insights_method', models.CharField(choices=[('graph', 'Graph'), ('chart', 'Chart'), ('both', 'Both')], max_length=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('points', models.IntegerField(default=0)),
                ('streak', models.IntegerField(default=0)),
                ('metrics', models.JSONField(default=dict)),
                ('targets', models.JSONField(default=dict)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='HabitRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True)),
                ('data', models.JSONField()),
                ('habit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='habits.habit')),
            ],
            options={
                'unique_together': {('habit', 'date')},
            },
        ),
    ]

// File: habits/migrations/__init__.py

// File: habits/models.py
from django.db import models
from django.conf import settings

class Habit(models.Model):
    TIMELINE_CHOICES = [
        ('1', '1 Month'),
        ('2', '2 Months'),
    ]
    REMINDER_CHOICES = [
        ('daily', 'Daily'),
        ('weekly', 'Weekly'),
    ]
    INSIGHTS_CHOICES = [
        ('graph', 'Graph'),
        ('chart', 'Chart'),
        ('both', 'Both'),
    ]

    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    name = models.CharField(max_length=100)
    timeline = models.CharField(max_length=1, choices=TIMELINE_CHOICES)
    motivational_reminder = models.CharField(max_length=6, choices=REMINDER_CHOICES)
    insights_method = models.CharField(max_length=5, choices=INSIGHTS_CHOICES)
    created_at = models.DateTimeField(auto_now_add=True)
    points = models.IntegerField(default=0)
    streak = models.IntegerField(default=0)
    
    metrics = models.JSONField(default=dict)   
    targets = models.JSONField(default=dict) 

    def __str__(self):
        return self.name

class HabitRecord(models.Model):
    habit = models.ForeignKey(Habit, on_delete=models.CASCADE)
    date = models.DateField(auto_now_add=True)
    data = models.JSONField()                

    class Meta:
        unique_together = ('habit','date')
// File: habits/settings.py
import os
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent
SECRET_KEY = 'replace-this-key'
DEBUG = True

ALLOWED_HOSTS = []

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'accounts',
    'habits'
]
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware'
]
ROOT_URLCONF = 'habits.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages'
            ]
        }
    }
]

WSGI_APPLICATION = 'habits.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_DB', 'habit_db'),
        'USER': os.environ.get('POSTGRES_USER', 'habit_user'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', 'habit_password'),
        'HOST': os.environ.get('POSTGRES_HOST', 'db'),
        'PORT': os.environ.get('POSTGRES_PORT', '5432')
    }
}
AUTH_USER_MODEL = 'accounts.User'

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'}
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True
STATIC_URL = '/static/'
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

// File: habits/urls.py
from django.urls import path
from . import views

app_name = 'habits'

urlpatterns = [
    path('new/', views.form_new_habit_view, name='form_new_habit'),
    path('ongoing/', views.ongoing_habit_view, name='ongoing_habit'),
    path('track/<int:habit_id>/', views.track_habit_view, name='track_habit'),
    path('abort/<int:habit_id>/', views.abort_process_view, name='abort_process'),
]

// File: habits/views.py
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from .forms import HabitForm
from .models import Habit, HabitRecord

PRESET_HABITS = {
    'stop_smoking': {
        'metrics': {'cigarettes_per_day':0, 'days_smoke_free':0, 'money_saved':0, 'craving_intensity':0},
        'targets': {'cigarettes_per_day':0}
    },
    'wake_up_early': {
        'metrics': {'wake_time':None, 'bedtime':None, 'sleep_duration':0, 'streak_count':0},
        'targets': {'wake_time': '06:00'}
    },
    'eat_healthy': {
        'metrics': {'meals_logged':0, 'fruit_veg_servings':0, 'water_glasses':0, 'hunger_rating':0},
        'targets': {'fruit_veg_servings':5}
    }
}

@login_required
def form_new_habit_view(request):
    template_key = request.GET.get('template')
    initial = {}
    if template_key in PRESET_HABITS:
        initial = PRESET_HABITS[template_key]
    if request.method == 'POST':
        form = HabitForm(request.POST)
        if form.is_valid():
            habit = form.save(commit=False)
            habit.user = request.user
            if template_key in PRESET_HABITS:
                habit.metrics = PRESET_HABITS[template_key]['metrics']
                habit.targets = PRESET_HABITS[template_key]['targets']
            habit.save()
            return redirect('habits:ongoing_habit')
    else:
        form = HabitForm(initial=initial)
    return render(request, 'form_new_habit.html', {'form': form})

@login_required
def track_habit_view(request, habit_id):
    habit = get_object_or_404(Habit, id=habit_id, user=request.user)
    if request.method == 'POST':
        form = HabitRecordForm(request.POST, metrics=habit.metrics)
        if form.is_valid():
            HabitRecord.objects.update_or_create(
                habit=habit, date=form.cleaned_data.get('date') or timezone.now().date(),
                defaults={'data': form.cleaned_data}
            )
            return redirect('habits:track_habit', habit_id=habit.id)
    else:
        form = HabitRecordForm(metrics=habit.metrics)
    records = HabitRecord.objects.filter(habit=habit).order_by('-date')
    return render(request, 'track_habit.html', {'habit': habit, 'form': form, 'records': records})


@login_required
def ongoing_habit_view(request):
    habits = Habit.objects.filter(user=request.user)
    return render(request, 'ongoing_habit.html', {'habits': habits})

@login_required
def abort_process_view(request, habit_id):
    habit = get_object_or_404(Habit, id=habit_id, user=request.user)
    habit.delete()
    return redirect('habits:ongoing_habit')

// File: habits/wsgi.py
import os
from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'habits.settings')
application = get_wsgi_application()

// File: manage.py
# manage.py
import os
import sys

def main():
    # Replace 'habits.settings' with 'backend.settings'
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(...)
    execute_from_command_line(sys.argv)

if __name__ == '__main__':
    main()

// File: static/css/custom.css
body {
    font-family: "Segoe UI", sans-serif;
  }
  
  .navbar-brand {
    font-weight: bold;
    font-size: 1.5rem;
  }
  
  .container {
    max-width: 700px;
  }
  
  .btn {
    border-radius: 0.5rem;
  }
  
  .card {
    border-radius: 1rem;
    box-shadow: 0 4px 8px rgba(0,0,0,0.05);
}
  
  .form-control, .form-select {
    height: 45px;
    font-size: 1rem;
  }
  .btn {
    padding: 12px 0;
    border-radius: 30px;
    font-weight: 600;
  }
  .modal-content {
    border-radius: 1rem;
  }
// File: templates/base.html
{% load static %}

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Habit Tracker</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"/>
  <link href="{% static 'css/custom.css' %}" rel="stylesheet"/>
</head>
<body class="bg-light">
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container">
      <a class="navbar-brand" href="{% url 'root' %}">Habit Tracker</a>
      <div class="collapse navbar-collapse justify-content-end">
        {% if request.user.is_authenticated %}
        <ul class="navbar-nav">
          <li class="nav-item"><a class="nav-link" href="{% url 'accounts:main_menu' %}">Dashboard</a></li>
          <li class="nav-item"><a class="nav-link" href="{% url 'accounts:logout' %}">Logout</a></li>
        </ul>
        {% endif %}
      </div>
    </div>
  </nav>
  <div class="container mt-5">
    {% block content %}{% endblock %}
  </div>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

// File: templates/change_password.html
{% extends 'base.html' %}
{% block content %}
<h2>Change Password</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Update Password</button>
</form>
{% endblock %}

// File: templates/edit_personal_info.html
{% extends 'base.html' %}
{% block content %}
<div class="row justify-content-center">
  <div class="col-md-6">
    <h2 class="text-center mb-4">Edit Personal Info</h2>
    <form method="post">
      {% csrf_token %}
      {{ form.as_p }}
      <div class="d-grid gap-2">
        <button type="submit" class="btn btn-warning">Save</button>
      </div>
    </form>
    <div class="text-center mt-3">
      <a href="{% url 'accounts:change_password' %}" class="btn btn-secondary">Change Password</a>
    </div>
  </div>
</div>
{% endblock %}

// File: templates/form_new_habit.html
{% extends 'base.html' %}
{% load crispy_forms_tags %}
{% block content %}
<div class="text-center mb-5">
  <h2>Create a New Habit</h2>
  <p>Select a ready‑made template or build your own:</p>
</div>

<div class="row row-cols-1 row-cols-md-4 g-4 mb-4">
  {% for tpl in [
      {'key':'stop_smoking','icon':'bi-emoji-smile','label':'Stop Smoking'},
      {'key':'wake_up_early','icon':'bi-sunrise','label':'Wake Up Early'},
      {'key':'eat_healthy','icon':'bi-apple','label':'Eat Healthy'},
      {'key':'custom','icon':'bi-pencil-square','label':'Custom'} ] %}
  <div class="col">
    <div class="card h-100 text-center template-card" data-template="{{ tpl.key }}">
      <div class="card-body d-flex flex-column justify-content-center">
        <i class="bi {{ tpl.icon }} display-4 mb-3"></i>
        <h5 class="card-title">{{ tpl.label }}</h5>
      </div>
    </div>
  </div>
  {% endfor %}
</div>

<form id="habit-form" method="post" class="d-none">
  {% csrf_token %}
  {{ form|crispy }}
  <div class="alert alert-info">
    Earn points and badges as you stay committed — gamification makes habit‑forming fun!
  </div>
  <button type="submit" class="btn btn-success w-100">Confirm</button>
</form>

<script>
  const presets = {
    stop_smoking: { name:'Stop Smoking', timeline:'2', motivational_reminder:'daily', insights_method:'both' },
    wake_up_early: { name:'Wake Up Early', timeline:'1', motivational_reminder:'weekly', insights_method:'graph' },
    eat_healthy: { name:'Eat Healthy', timeline:'2', motivational_reminder:'daily', insights_method:'chart' },
  };

  document.querySelectorAll('.template-card').forEach(card => {
    card.addEventListener('click', () => {
      const form = document.getElementById('habit-form');
      form.classList.remove('d-none');
      form.reset();
      if(card.dataset.template !== 'custom'){
        Object.entries(presets[card.dataset.template]).forEach(([field,value])=>{
          const input = form.querySelector(`[name="${field}"]`);
          if(input) input.value = value;
        });
      }
    });
  });
</script>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
{% endblock %}

// File: templates/home.html
{% extends 'base.html' %}
{% block content %}
<div class="text-center">
  <h2 class="mb-4">Welcome, {{ request.user.full_name }}</h2>
  <p class="mb-3">This is your home page.</p>
  <a href="{% url 'accounts:logout' %}" class="btn btn-danger">Logout</a>
</div>
{% endblock %}

// File: templates/index.html
{% extends 'base.html' %}
{% block content %}
<div class="text-center">
  <h2 class="mb-4">Welcome to the Habit Tracker</h2>
  <a href="{% url 'accounts:login' %}" class="btn btn-primary me-2">Login</a>
  <a href="{% url 'accounts:register' %}" class="btn btn-secondary">Sign Up</a>
</div>
{% endblock %}

// File: templates/login.html
{% extends 'base.html' %}
{% load crispy_forms_tags %}

{% block content %}
<div class="row justify-content-center mt-5">
  <div class="col-md-5">
    <h2 class="text-center mb-4">Login</h2>
    <form method="post" action="{% url 'accounts:login' %}">
      {% csrf_token %}
      {{ form.non_field_errors }}
      <div class="mb-3">{{ form.username|as_crispy_field }}</div>
      <div class="mb-3">{{ form.password|as_crispy_field }}</div>
      <button type="submit" class="btn btn-primary w-100">Login</button>
    </form>
    <p class="text-center mt-3">
      <a href="#" data-bs-toggle="modal" data-bs-target="#registerModal">Need an account? Register here</a>
    </p>
  </div>
</div>

<!-- REGISTER MODAL -->
<div class="modal fade" id="registerModal" tabindex="-1">
  <div class="modal-dialog modal-lg modal-dialog-centered">
    <div class="modal-content rounded-4 shadow-sm">
      <form method="post" action="{% url 'accounts:register' %}">
        {% csrf_token %}
        <div class="modal-header border-bottom-0">
          <h5 class="modal-title mx-auto">Sign Up</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body px-5">
          <div class="row g-3 mb-4">
            <div class="col-md-6">{{ register_form.id_number|as_crispy_field }}</div>
            <div class="col-md-6">{{ register_form.full_name|as_crispy_field }}</div>
            <div class="col-md-6">{{ register_form.phone_number|as_crispy_field }}</div>
            <div class="col-md-6">{{ register_form.age|as_crispy_field }}</div>
            <div class="col-md-6">{{ register_form.password1|as_crispy_field }}</div>
            <div class="col-md-6">{{ register_form.password2|as_crispy_field }}</div>
          </div>
          <hr>
          <div class="row mb-3 align-items-center">
            <div class="col-5">
              <select name="pet_name" class="form-select" required>
                <option value="">Question 1 *</option>
                <option>What was your first pet’s name?</option>
                <option>What city were you born in?</option>
                <option>What was your childhood nickname?</option>
              </select>
            </div>
            <div class="col">
              <input name="pet_name" type="text" class="form-control" placeholder="Answer" required>
            </div>
          </div>
          <div class="row mb-3 align-items-center">
            <div class="col-5">
              <select name="first_love" class="form-select" required>
                <option value="">Question 2 *</option>
                <option>Who was your first love?</option>
                <option>What is your mother’s maiden name?</option>
                <option>What high school did you attend?</option>
              </select>
            </div>
            <div class="col">
              <input name="first_love" type="text" class="form-control" placeholder="Answer" required>
            </div>
          </div>
          <div class="row mb-3 align-items-center">
            <div class="col-5">
              <select name="favorite_color" class="form-select">
                <option value="">Question 3 (optional)</option>
                <option>What is your favorite color?</option>
                <option>What street did you grow up on?</option>
                <option>What was your childhood phone number?</option>
              </select>
            </div>
            <div class="col">
              <input name="favorite_color" type="text" class="form-control" placeholder="Answer (optional)">
            </div>
          </div>
        </div>
        <div class="modal-footer border-top-0 px-5">
          <button type="submit" class="btn btn-success w-100 rounded-pill">Register</button>
        </div>
      </form>
    </div>
  </div>
</div>
{% endblock %}

// File: templates/main_menu.html
{% extends 'base.html' %}
{% block content %}
<h2 class="text-center mb-4">Dashboard</h2>
<div class="list-group">
  <a href="{% url 'habits:form_new_habit' %}" class="list-group-item list-group-item-action">
    Form a New Habit
  </a>
  <a href="{% url 'habits:ongoing_habit' %}" class="list-group-item list-group-item-action">
    Ongoing Habit
  </a>
  <a href="{% url 'accounts:edit_personal_info' %}" class="list-group-item list-group-item-action">
    Edit Personal Info
  </a>
  <a href="{% url 'accounts:logout' %}" class="list-group-item list-group-item-action">
    Logout
  </a>
</div>
{% endblock %}

// File: templates/ongoing_habit.html
{% extends 'base.html' %}
{% block content %}
<h2 class="mb-4">Ongoing Habits</h2>
{% if habits %}
  <div class="row row-cols-1 row-cols-md-2 g-3">
    {% for habit in habits %}
      <div class="col">
        <div class="card border-primary">
          <div class="card-body">
            <h5 class="card-title">{{ habit.name }}</h5>
            <p class="card-text">
              Created: {{ habit.created_at|date:"Y-m-d" }}
            </p>
            <div>
              <a href="{% url 'habits:track_habit' habit.id %}" class="btn btn-sm btn-primary">
                Track
              </a>
              <a href="{% url 'habits:abort_process' habit.id %}" class="btn btn-sm btn-danger">
                Abort
              </a>
            </div>
          </div>
        </div>
      </div>
    {% endfor %}
  </div>
{% else %}
  <p>No habits found. <a href="{% url 'habits:form_new_habit' %}">Create one?</a></p>
{% endif %}
{% endblock %}

// File: templates/track_habit.html
{% extends 'base.html' %}
{% block content %}
<div class="row justify-content-center">
  <div class="col-md-8">
    <h2 class="mb-4">Track Habit: {{ habit.name }}</h2>
    <ul class="list-group">
      <li class="list-group-item">View Streaks</li>
      <li class="list-group-item">View Points</li>
      <li class="list-group-item">Upcoming Challenges</li>
      <li class="list-group-item">View Insights</li>
      <li class="list-group-item">Update Reminders</li>
      <li class="list-group-item">Update Goal</li>
    </ul>
    <p class="mt-3">
      (These are placeholders; implement your logic for each sub-flow.)
    </p>
  </div>
</div>
{% endblock %}

