// File: accounts/__init__.py

// File: accounts/admin.py

// File: accounts/api/search.py

// File: accounts/apps.py
from django.apps import AppConfig

class AccountsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'accounts'

// File: accounts/forms.py
from django import forms
from django.contrib.auth.forms import AuthenticationForm, UserCreationForm
from .models import User, SecurityQuestion

class RegisterForm(UserCreationForm):
    question1_subquestion = forms.ChoiceField(label="Select Question 1", required=True)
    answer1 = forms.CharField(label="Answer 1", required=True)

    question2_subquestion = forms.ChoiceField(label="Select Question 2", required=True)
    answer2 = forms.CharField(label="Answer 2", required=True)

    question3_subquestion = forms.ChoiceField(label="Select Question 3 (optional)", required=False)
    answer3 = forms.CharField(label="Answer 3 (optional)", required=False)

    class Meta:
        model = User
        fields = [ 'id_number', 'full_name', 'phone_number', 'age', 'password1', 'password2' ]

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        q1 = SecurityQuestion.objects.get(question_text="Security Question 1")
        q2 = SecurityQuestion.objects.get(question_text="Security Question 2")
        q3 = SecurityQuestion.objects.get(question_text="Security Question 3")

        self.fields['question1_subquestion'].choices = [
            (q1.option1, q1.option1),
            (q1.option2, q1.option2),
            (q1.option3, q1.option3),
        ]
        self.fields['question2_subquestion'].choices = [
            (q2.option1, q2.option1),
            (q2.option2, q2.option2),
            (q2.option3, q2.option3),
        ]
        self.fields['question3_subquestion'].choices = [
            (q3.option1, q3.option1),
            (q3.option2, q3.option2),
            (q3.option3, q3.option3),
        ]

    def clean(self):
        cleaned = super().clean()
        answers = [
            cleaned.get('answer1', '').strip(),
            cleaned.get('answer2', '').strip(),
            cleaned.get('answer3', '').strip()
        ]
        if sum(bool(a) for a in answers) < 2:
            raise forms.ValidationError("Please answer at least two security questions.")
        return cleaned


class LoginForm(AuthenticationForm):
    username = forms.CharField(label='ID Number')

class UpdatePersonalInfoForm(forms.ModelForm):
    class Meta:
        model = User
        fields = ['phone_number', 'age']

// File: accounts/managers.py
from django.contrib.auth.base_user import BaseUserManager

class UserManager(BaseUserManager):
    def create_user(self, id_number, phone_number, age, full_name, password=None, **extra_fields):
        if not id_number:
            raise ValueError("Users must have an ID number.")
        user = self.model(
            id_number=id_number,
            phone_number=phone_number,
            age=age,
            full_name=full_name,
            **extra_fields
        )
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, id_number, phone_number, age, full_name, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        if extra_fields.get('is_staff') is not True:
            raise ValueError("Superuser must have is_staff=True.")
        if extra_fields.get('is_superuser') is not True:
            raise ValueError("Superuser must have is_superuser=True.")
        return self.create_user(id_number, phone_number, age, full_name, password, **extra_fields)

// File: accounts/migrations/0001_initial.py
# Generated by Django 3.2.25 on 2025-03-21 15:56

from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id_number', models.CharField(max_length=50, unique=True)),
                ('full_name', models.CharField(blank=True, max_length=150)),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('age', models.PositiveIntegerField(blank=True, null=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]

// File: accounts/migrations/0002_auto_20250321_1607.py
# Generated by Django 3.2.25 on 2025-03-21 16:07

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='user',
            name='favorite_color',
            field=models.CharField(blank=True, max_length=50, null=True),
        ),
        migrations.AddField(
            model_name='user',
            name='first_love',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='user',
            name='pet_name',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
    ]

// File: accounts/migrations/0003_auto_20250322_2047.py
# Generated by Django 3.2.25 on 2025-03-22 20:47

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0002_auto_20250321_1607'),
    ]

    operations = [
        migrations.CreateModel(
            name='SecurityQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.CharField(max_length=255)),
                ('option1', models.CharField(max_length=255)),
                ('option2', models.CharField(max_length=255)),
                ('option3', models.CharField(max_length=255)),
            ],
        ),
        migrations.RemoveField(
            model_name='user',
            name='favorite_color',
        ),
        migrations.RemoveField(
            model_name='user',
            name='first_love',
        ),
        migrations.RemoveField(
            model_name='user',
            name='pet_name',
        ),
        migrations.CreateModel(
            name='UserSecurityAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.CharField(max_length=255)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.securityquestion')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='security_answers', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]

// File: accounts/migrations/0004_usersecurityanswer_question_text.py
# Generated by Django 3.2.25 on 2025-03-22 21:03

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0003_auto_20250322_2047'),
    ]

    operations = [
        migrations.AddField(
            model_name='usersecurityanswer',
            name='question_text',
            field=models.CharField(default='', max_length=255),
        ),
    ]

// File: accounts/migrations/__init__.py

// File: accounts/models.py
from django.db import models
from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin
from django.utils import timezone
from .managers import UserManager
from django.conf import settings

class User(AbstractBaseUser, PermissionsMixin):
    id_number = models.CharField(max_length=50, unique=True)
    full_name = models.CharField(max_length=150, blank=True)
    phone_number = models.CharField(max_length=20, blank=True)
    age = models.PositiveIntegerField(null=True, blank=True)
    date_joined = models.DateTimeField(default=timezone.now)
    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)

    objects = UserManager()

    USERNAME_FIELD = 'id_number'
    REQUIRED_FIELDS = ['phone_number', 'age', 'full_name']

    def __str__(self):
        return self.id_number

class SecurityQuestion(models.Model):
    question_text = models.CharField(max_length=255)
    option1 = models.CharField(max_length=255)
    option2 = models.CharField(max_length=255)
    option3 = models.CharField(max_length=255)

    def __str__(self):
        return self.question_text
    
class UserSecurityAnswer(models.Model):
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name='security_answers'
    )
    
    question = models.ForeignKey(SecurityQuestion, on_delete=models.CASCADE)
    question_text = models.CharField(max_length=255, default="") 
    answer = models.CharField(max_length=255)

    def __str__(self):
        return f"{self.user.id_number} - {self.question.question_text}"
// File: accounts/tests.py

// File: accounts/urls.py
from django.urls import path
from . import views

app_name = 'accounts'

urlpatterns = [
    path('register/', views.register_view, name='register'),
    path('login/', views.login_view, name='login'),
    path('', views.login_view, name='index'),
    path('logout/', views.logout_view, name='logout'),
    path('main_menu/', views.main_menu_view, name='main_menu'),
    path('edit_personal_info/', views.edit_personal_info_view, name='edit_personal_info'),
    path('change_password/', views.change_password_view, name='change_password'),
    path('verify_security_answers/', views.verify_security_answers, name='verify_security_answers'),
    path('public_forgot_password/', views.public_forgot_password_view, name='public_forgot_password_view'),
    path('public_verify_security_answers/', views.public_verify_security_answers, name='public_verify_security_answers'),
]
// File: accounts/views.py
from django.shortcuts import render, redirect
from django.contrib.auth import login, logout, authenticate
from django.contrib.auth.decorators import login_required
from django.contrib.auth.forms import PasswordChangeForm, SetPasswordForm
from django.contrib.auth import update_session_auth_hash
from django.http import JsonResponse
from .models import UserSecurityAnswer, SecurityQuestion, User
from django.shortcuts import get_object_or_404

import json
from .forms import RegisterForm, LoginForm, UpdatePersonalInfoForm

def index_view(request):
    return redirect('accounts:login')

@login_required
def main_menu_view(request):
    return render(request, 'main_menu.html')

def logout_view(request):
    logout(request)
    return redirect('accounts:login')


def register_view(request):
    if request.method == 'POST':
        form = RegisterForm(request.POST)
        if form.is_valid():
            user = form.save()

            q_obj1 = get_object_or_404(SecurityQuestion, question_text="Security Question 1")
            chosen_q1 = form.cleaned_data['question1_subquestion'] 
            ans1 = form.cleaned_data['answer1']
            UserSecurityAnswer.objects.create(
                user=user,
                question=q_obj1,
                question_text=chosen_q1,
                answer=ans1
            )
            
            q_obj2 = get_object_or_404(SecurityQuestion, question_text="Security Question 2")
            chosen_q2 = form.cleaned_data['question2_subquestion']
            ans2 = form.cleaned_data['answer2']
            UserSecurityAnswer.objects.create(
                user=user,
                question=q_obj2,
                question_text=chosen_q2,
                answer=ans2
            )
            
            chosen_q3 = form.cleaned_data.get('question3_subquestion')
            ans3 = form.cleaned_data.get('answer3')
            if chosen_q3 and ans3:
                q_obj3 = get_object_or_404(SecurityQuestion, question_text="Security Question 3")
                UserSecurityAnswer.objects.create(
                    user=user,
                    question=q_obj3,
                    question_text=chosen_q3,
                    answer=ans3
                )
            
            login(request, user)
            return redirect('accounts:main_menu')
    else:
        form = RegisterForm()
    return render(request, 'login.html', {'form': form})

def login_view(request):
    if request.method == 'POST':
        form = LoginForm(request, data=request.POST)
        if form.is_valid():
            login(request, form.get_user())
            return redirect('accounts:main_menu')
    else:
        form = LoginForm()
    register_form = RegisterForm()
    return render(request, 'login.html', {'form': form, 'register_form': register_form})

def public_forgot_password_view(request):
    data = json.loads(request.body)
    id_number = data.get('id_number', '').strip()
    user = User.objects.filter(id_number=id_number).first()
    if not user:
        return JsonResponse({"ok": False, "errors": {"id_number": ["User not found."]}}, status=400)
    if data.get('verify'):
        form = SetPasswordForm(user, data)
        if form.is_valid():
            form.save()
            return JsonResponse({"ok": True})
        return JsonResponse({"ok": False, "errors": form.errors}, status=400)
    old_password = data.get("old_password", "").strip()
    new_password1 = data.get("new_password1", "").strip()
    new_password2 = data.get("new_password2", "").strip()
    if 'old_password' in data and (new_password1 or new_password2):
        if not user.check_password(old_password):
            return JsonResponse({"ok": False, "errors": {"old_password": ["Incorrect password."]}}, status=400)
        if old_password == new_password1:
            return JsonResponse({"ok": False, "errors": {"new_password1": ["New password cannot be the same as the old password."]}}, status=400)
        form = PasswordChangeForm(user, data)
        if form.is_valid():
            form.save()
            return JsonResponse({"ok": True})
        return JsonResponse({"ok": False, "errors": form.errors}, status=400)
    if old_password:
        if not user.check_password(old_password):
            return JsonResponse({"ok": False, "errors": {"old_password": ["Incorrect password."]}}, status=400)
        return JsonResponse({"ok": True})
    return JsonResponse({"error": "Invalid request"}, status=400)

def public_verify_security_answers(request):
    data = json.loads(request.body)
    id_number = data.get('id_number', '').strip()
    user = User.objects.filter(id_number=id_number).first()
    if not user:
        return JsonResponse({'valid': False})
    user_answers = UserSecurityAnswer.objects.filter(user=user)
    correct = 0
    for ua in user_answers:
        typed = data.get(ua.question_text, '').strip().lower()
        if ua.answer.strip().lower() == typed:
            correct += 1
    return JsonResponse({'valid': correct >= 2})


@login_required
def change_password_view(request):
    user = request.user
    data = json.loads(request.body)

    if data.get('verify'):
        form = SetPasswordForm(user, data)
        if form.is_valid():
            form.save()
            update_session_auth_hash(request, user)
            return JsonResponse({"ok": True})
        return JsonResponse({"ok": False, "errors": form.errors}, status=400)

    if (
        'old_password' in data
        and data.get('new_password1') == ""
        and data.get('new_password2') == ""
    ):
        old_password = data["old_password"].strip()
        print("DEBUG old_password:", repr(old_password))
        print("DEBUG check_password =>", user.check_password(old_password))
        if not user.check_password(old_password):
            return JsonResponse({"ok": False, "errors": {"old_password": ["Incorrect password."]}}, status=400)
        return JsonResponse({"ok": True})

    if 'old_password' in data and data.get('old_password'):
        form = PasswordChangeForm(user, data)
        if form.is_valid():
            form.save()
            update_session_auth_hash(request, user)
            return JsonResponse({"ok": True})
        return JsonResponse({"ok": False, "errors": form.errors}, status=400)

    return JsonResponse({"error": "Invalid request"}, status=400)

@login_required
def edit_personal_info_view(request):
    user = request.user
    form = UpdatePersonalInfoForm(request.POST or None, instance=user)
    password_form = PasswordChangeForm(user=user)
    set_password_form = SetPasswordForm(user=user)
    user_answers = user.security_answers.all()
    questions = {ua.question_text: ua.answer for ua in user_answers}
    if request.method == 'POST' and form.is_valid():
        form.save()
        return redirect('accounts:main_menu')
    context = {
        'form': form,
        'password_form': password_form,
        'set_password_form': set_password_form,
        'security_questions': questions,
    }
    return render(request, 'edit_personal_info.html', context)

@login_required
def verify_security_answers(request):
    data = json.loads(request.body)
    user = request.user
    user_answers = user.security_answers.all()
    correct = 0
    for ua in user_answers:
        submitted = data.get(ua.question_text, "").strip().lower()
        if ua.answer.strip().lower() == submitted:
            correct += 1
    return JsonResponse({'valid': correct >= 2})

// File: backend/__init__.py
from .celery import app as celery

// File: backend/admin.py

// File: backend/celery.py
import os
from celery import Celery

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')

app = Celery('backend')
app.config_from_object('django.conf:settings', namespace='CELERY')
app.autodiscover_tasks()

// File: backend/settings.py
import os
from pathlib import Path
from celery.schedules import crontab

BASE_DIR = Path(__file__).resolve().parent.parent

DEMO_MODE = os.getenv('DEMO_MODE') == 'True'

SECRET_KEY = 'a-strong-secret-key'
DEBUG = True
ALLOWED_HOSTS = []

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'crispy_forms',
    'crispy_bootstrap5',
    'django_celery_beat',
    'django_celery_results',
    
    'accounts',
    'habits',
]

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

STATICFILES_DIRS = [ BASE_DIR / "static" ]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_DB', 'habit_db'),
        'USER': os.environ.get('POSTGRES_USER', 'habit_user'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', 'habit_password'),
        'HOST': os.environ.get('POSTGRES_HOST', 'db'),
        'PORT': os.environ.get('POSTGRES_PORT', '5432'),
    }
}

AUTH_USER_MODEL = 'accounts.User'

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

CELERY_BROKER_URL = 'redis://redis:6379/0'
CELERY_RESULT_BACKEND = 'redis://redis:6379/0'


if DEMO_MODE:
    CELERY_BEAT_SCHEDULE = {
        # Fires 1 minute after habit creation
        'demo_initial_reminder': {
            'task': 'habits.tasks.send_notification',
            'schedule': crontab(minute='*/1'),
            'args': ('Welcome to your new habit!',)
        },
        # Fires 2 minutes in → Daily Reminder
        'demo_daily_reminder': {
            'task': 'habits.tasks.send_notification',
            'schedule': crontab(minute='*/2'),
            'args': ('Daily Check‑In: Keep going!',)
        },
        # Fires 3 minutes in → Weekly Reminder
        'demo_weekly_reminder': {
            'task': 'habits.tasks.send_notification',
            'schedule': crontab(minute='*/3'),
            'args': ('Weekly Motivation: You’re doing great!',)
        },
        # Fires 4 minutes in → Upcoming Challenge
        'demo_challenge': {
            'task': 'habits.tasks.send_notification',
            'schedule': crontab(minute='*/4'),
            'args': ('Next badge in 1 day — keep your streak alive!',)
        },
        # Fires 5 minutes in → Badge Earned
        'demo_badge': {
            'task': 'habits.tasks.send_notification',
            'schedule': crontab(minute='*/5'),
            'args': ('🏅 Congrats — Silver Badge Unlocked!',)
        },
        # Fires 6 minutes in → Streak Broken
        'demo_streak_break': {
            'task': 'habits.tasks.send_notification',
            'schedule': crontab(minute='*/6'),
            'args': ('⚠️ Oops — your streak reset to 0',)
        },
    }

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = '/static/'
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

// File: backend/urls.py
from django.contrib import admin
from django.urls import path, include
from accounts import views as accounts_views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', accounts_views.login_view, name='root'),
    path('accounts/', include('accounts.urls', namespace='accounts')),
    path('habits/', include('habits.urls', namespace='habits')),
]

// File: backend/wsgi.py
import os
from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
application = get_wsgi_application()

// File: habits/apps.py
from django.apps import AppConfig

class HabitsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'habits'

// File: habits/asgi.py
import os
from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'habits.settings')
application = get_asgi_application()

// File: habits/forms.py
from django import forms
from .models import Habit

class HabitForm(forms.ModelForm):
    class Meta:
        model = Habit
        fields = ['name', 'timeline', 'motivational_reminder', 'insights_method']

class HabitRecordForm(forms.Form):
    def __init__(self, *args, metrics=None, **kwargs):
        super().__init__(*args, **kwargs)
        if metrics:
            for key, val in metrics.items():
                t = val.get('type', 'text')
                l = key.replace('_', ' ').title()
                if t == 'number':
                    self.fields[key] = forms.FloatField(required=False, label=l)
                elif t == 'date':
                    self.fields[key] = forms.DateField(required=False, label=l, widget=forms.DateInput(attrs={'type': 'date'}))
                elif t == 'time':
                    self.fields[key] = forms.TimeField(required=False, label=l, widget=forms.TimeInput(attrs={'type': 'time'}))
                elif t == 'yesno':
                    self.fields[key] = forms.BooleanField(required=False, label=l)
                else:
                    self.fields[key] = forms.CharField(required=False, label=l)

// File: habits/migrations/0001_initial.py
# Generated by Django 3.2.25 on 2025-03-21 18:55

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Habit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('timeline', models.CharField(choices=[('1', '1 Month'), ('2', '2 Months')], max_length=1)),
                ('motivational_reminder', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly')], max_length=6)),
                ('insights_method', models.CharField(choices=[('graph', 'Graph'), ('chart', 'Chart'), ('both', 'Both')], max_length=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('points', models.IntegerField(default=0)),
                ('streak', models.IntegerField(default=0)),
                ('metrics', models.JSONField(default=dict)),
                ('targets', models.JSONField(default=dict)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='HabitRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True)),
                ('data', models.JSONField()),
                ('habit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='habits.habit')),
            ],
            options={
                'unique_together': {('habit', 'date')},
            },
        ),
    ]

// File: habits/migrations/__init__.py

// File: habits/models.py
from django.db import models
from django.conf import settings
from django.utils.timezone import now

class Habit(models.Model):
    TIMELINE_CHOICES = [
        ('1', '1 Month'),
        ('2', '2 Months'),
    ]
    REMINDER_CHOICES = [
        ('daily', 'Daily'),
        ('weekly', 'Weekly'),
    ]
    INSIGHTS_CHOICES = [
        ('graph', 'Graph'),
        ('chart', 'Chart'),
        ('both', 'Both'),
    ]

    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    name = models.CharField(max_length=100)
    timeline = models.CharField(max_length=1, choices=TIMELINE_CHOICES)
    motivational_reminder = models.CharField(max_length=6, choices=REMINDER_CHOICES)
    insights_method = models.CharField(max_length=5, choices=INSIGHTS_CHOICES)
    created_at = models.DateTimeField(auto_now_add=True)
    points = models.IntegerField(default=0)
    streak = models.IntegerField(default=0)
    
    metrics = models.JSONField(default=dict)   
    targets = models.JSONField(default=dict) 

    def __str__(self):
        return self.name

class HabitRecord(models.Model):
    habit = models.ForeignKey(Habit, on_delete=models.CASCADE)
    date = models.DateField(auto_now_add=True)
    data = models.JSONField()

    class Meta:
        unique_together = ('habit','date')

def update_streak(self):
    records = HabitRecord.objects.filter(habit=self).order_by('-date')
    streak = 0
    for record in records:
        if (record.date - now().date()).days == streak:
            streak += 1
        else:
            break
    self.streak = streak
    self.save()

// File: habits/settings.py
import os
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent
SECRET_KEY = 'replace-this-key'
DEBUG = True

ALLOWED_HOSTS = []

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'crispy_forms',
    'crispy_bootstrap5',
    
    'accounts',
    'habits'
]

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware'
]

ROOT_URLCONF = 'habits.urls'

STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'context_processors',
                'django.contrib.messages.context_processors.messages'
            ]
        }
    }
]

WSGI_APPLICATION = 'habits.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_DB', 'habit_db'),
        'USER': os.environ.get('POSTGRES_USER', 'habit_user'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', 'habit_password'),
        'HOST': os.environ.get('POSTGRES_HOST', 'db'),
        'PORT': os.environ.get('POSTGRES_PORT', '5432')
    }
}
AUTH_USER_MODEL = 'accounts.User'

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'}
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True
STATIC_URL = '/static/'
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

// File: habits/urls.py
from django.urls import path
from . import views

app_name = 'habits'

urlpatterns = [
    path('new/', views.form_new_habit_view, name='form_new_habit'),
    path('ongoing/', views.ongoing_habit_view, name='ongoing_habit'),
    path('abort/<int:habit_id>/', views.abort_process_view, name='abort_process'),
    path('track/<int:habit_id>/', views.track_habit_detail_view, name='track_habit_detail'),
    path('insert/<int:habit_id>/', views.insert_data_view, name='insert_data'),
]

// File: habits/views.py
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.utils import timezone
from django.utils.timezone import now
from .forms import HabitForm, HabitRecordForm
from .models import Habit, HabitRecord

PRESET_HABITS = {
    'stop_smoking': {
        'metrics': {
            'cigarettes_per_day': 0,
            'craving_level': None,
            'planned_quit_date': None,
            'nicotine_replacement': '',
            'trigger_coping': ''
        },
        'targets': {
            'cigarettes_per_day': 0
        },
        'extra_fields': [
            {'key': 'cigarettes_per_day', 'label': 'Cigarettes per Day', 'type': 'number'},
            {'key': 'craving_level', 'label': 'Craving Level (1-10)', 'type': 'number'},
            {'key': 'planned_quit_date', 'label': 'Planned Quit Date', 'type': 'date'},
            {'key': 'nicotine_replacement', 'label': 'Nicotine Replacement', 'type': 'text'},
            {'key': 'trigger_coping', 'label': 'Triggers & Coping Strategies', 'type': 'textarea'}
        ]
    },
    'wake_up_early': {
        'metrics': {
            'current_wake_time': None,
            'desired_wake_time': None,
            'bedtime': None,
            'sleep_quality': None,
            'snooze_count': 0
        },
        'targets': {},
        'extra_fields': [
            {'key': 'current_wake_time', 'label': 'Current Wake Time', 'type': 'time'},
            {'key': 'desired_wake_time', 'label': 'Desired Wake Time', 'type': 'time'},
            {'key': 'bedtime', 'label': 'Bedtime', 'type': 'time'},
            {'key': 'sleep_quality', 'label': 'Sleep Quality (1-10)', 'type': 'number'},
            {'key': 'snooze_count', 'label': 'Number of Snoozes', 'type': 'number'}
        ]
    },
    'eat_healthy': {
        'metrics': {
            'daily_calorie_target': 2000,
            'fruit_veg_target': 5,
            'water_intake_goal': 8,
            'junk_food_consumption': 0
        },
        'targets': {
            'fruit_veg_target': 5,
            'water_intake_goal': 8
        },
        'extra_fields': [
            {'key': 'daily_calorie_target', 'label': 'Daily Calorie Target', 'type': 'number'},
            {'key': 'fruit_veg_target', 'label': 'Fruit & Vegetable Servings', 'type': 'number'},
            {'key': 'water_intake_goal', 'label': 'Water Intake (glasses/day)', 'type': 'number'},
            {'key': 'junk_food_consumption', 'label': 'Junk Food Consumption', 'type': 'number'}
        ]
    }
}

PRESET_TEMPLATES = [
    {'key': 'stop_smoking', 'icon': 'bi-emoji-smile', 'label': 'Stop Smoking'},
    {'key': 'wake_up_early', 'icon': 'bi-sunrise', 'label': 'Wake Up Early'},
    {'key': 'eat_healthy', 'icon': 'bi-apple', 'label': 'Eat Healthy'},
    {'key': 'custom', 'icon': 'bi-pencil-square', 'label': 'Custom'}
]

@login_required
def form_new_habit_view(request):
    template_key = request.GET.get('template')
    if request.method == 'POST':
        form = HabitForm(request.POST)
        if form.is_valid():
            habit = form.save(commit=False)
            habit.user = request.user
            if template_key in PRESET_HABITS:
                preset = PRESET_HABITS[template_key]
                metric_data = {}
                for field in preset.get('extra_fields', []):
                    key = field['key']
                    val = request.POST.get(key, '')
                    metric_data[key] = {'type': field['type'], 'default': val}
                habit.metrics = metric_data
                habit.targets = preset.get('targets', {}).copy()
            custom_keys = request.POST.getlist('custom_field_key[]', [])
            custom_types = request.POST.getlist('custom_field_type[]', [])
            custom_values = request.POST.getlist('custom_field_value[]', [])
            for i in range(len(custom_keys)):
                field_name = custom_keys[i].strip()
                field_type = custom_types[i].strip()
                default_val = custom_values[i].strip()
                if field_name:
                    habit.metrics[field_name] = {'type': field_type, 'default': default_val}
            habit.save()
            return redirect('habits:ongoing_habit')
    else:
        form = HabitForm()
    return render(request, 'form_new_habit.html', {'form': form, 'templates': PRESET_TEMPLATES})

@login_required
def ongoing_habit_view(request):
    habits = Habit.objects.filter(user=request.user)
    return render(request, 'ongoing_habit.html', {'habits': habits})

@login_required
def abort_process_view(request, habit_id):
    habit = get_object_or_404(Habit, id=habit_id, user=request.user)
    habit.delete()
    return redirect('habits:ongoing_habit')

@login_required
def track_habit_detail_view(request, habit_id):
    habit = get_object_or_404(Habit, id=habit_id, user=request.user)
    streak = habit.streak if habit.streak else 0
    total_points = habit.points
    badge = None
    if total_points >= 150:
        badge = "Platinum"
    elif total_points >= 75:
        badge = "Gold"
    elif total_points > 0:
        badge = "Silver"
    habit_records = HabitRecord.objects.filter(habit=habit).order_by("date")
    total_days = (habit.created_at.date() - now().date()).days
    days_remaining = habit.timeline
    committed_days = total_days - int(days_remaining) if total_days > 0 else 0
    if request.method == "POST":
        if "reminder_frequency" in request.POST:
            habit.motivational_reminder = request.POST["reminder_frequency"]
        if "timeline" in request.POST:
            habit.timeline = request.POST["timeline"]
        habit.save()
        return redirect('habits:track_habit_detail', habit_id=habit.id)
    return render(request, 'track_habits/track_habit_detail.html', {
        "habit": habit,
        "streak": streak,
        "total_points": total_points,
        "badge": badge,
        "habit_records": habit_records,
        "committed_days": committed_days,
        "days_remaining": days_remaining
    })

@login_required
def insert_data_view(request, habit_id):
    habit = get_object_or_404(Habit, id=habit_id, user=request.user)
    today = timezone.now().date()
    existing_record = HabitRecord.objects.filter(habit=habit, date=today).first()
    if request.method == "POST":
        form = HabitRecordForm(request.POST, metrics=habit.metrics)
        if form.is_valid():
            data = form.cleaned_data
            HabitRecord.objects.update_or_create(habit=habit, date=today, defaults={'data': data})
            return redirect('habits:track_habit_detail', habit_id=habit.id)
    else:
        form = HabitRecordForm(metrics=habit.metrics)
    records = HabitRecord.objects.filter(habit=habit).order_by('-date')
    return render(request, 'track_habits/insert_data.html', {'habit': habit, 'form': form, 'records': records})
// File: habits/wsgi.py
import os
from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'habits.settings')
application = get_wsgi_application()

// File: manage.py
# manage.py
import os
import sys

def main():
    # Replace 'habits.settings' with 'backend.settings'
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(...)
    execute_from_command_line(sys.argv)

if __name__ == '__main__':
    main()

// File: static/css/custom.css
body {
  background-color: var(--body-bg);
  color: var(--body-color);
  margin: 0;
  padding: 0;
}

.dashboard-container {
  padding: 2rem 0;
}

.dashboard-title {
  font-size: 2.5rem;
  font-weight: 600;
  text-align: center;
  margin-bottom: 2rem;
}

.card:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 12px rgba(0,0,0,0.15);
  transition: all 0.2s ease-in-out;
}

.action-card,
.info-card {
  border-radius: 1rem;
  transition: all 0.2s ease-in-out;
}

.action-card .list-group-item {
  font-size: 1.1rem;
  padding: 1rem 1.5rem;
}

.logout-link {
  color: var(--footer-text);
  font-weight: 600;
}



.dashboard-container {
  padding: 2rem 0;
}
.dashboard-title {
  font-size: 2.5rem;
  font-weight: 600;
  text-align: center;
  margin-bottom: 2rem;
}
.action-card {
  border-radius: 1rem;
  box-shadow: var(--card-shadow);
}
.action-card .list-group-item {
  padding: 1rem 1.5rem;
  font-size: 1.1rem;
}
.logout-link {
  color: var(--danger);
  font-weight: 600;
}
.info-card {
  border-radius: 1rem;
  box-shadow: 0 4px 10px rgba(0,0,0,0.1);
}
.modal-content.bg-card {
  background-color: #fff !important;
  border-radius: 1rem;
}
#changePassModal .modal-body {
  min-height: 300px;
  background-color: #fff !important;
}
.progress-bar {
  transition: width 0.3s ease;
}
.text-danger.small {
  min-height: 1.2rem;
}
:root {
  --card-shadow: 0 8px 16px rgba(0,0,0,0.08);
  --danger: #d9534f;
}
.edit-info-container {
  max-width: 500px;
  margin: 0 auto;
  padding-top: 2rem;
}
.info-card, .modal-content.bg-card {
  border-radius: 1rem;
  background-color: #fff !important;
}
.modal-body .form-control {
  height: 45px;
  background-color: #fff !important;
}
.template-card {
  cursor: pointer;
  transition: transform 0.2s ease-in-out, box-shadow 0.2s;
}
.template-card:hover {
  transform: scale(1.05);
  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);
}

// File: static/css/theme.css
:root {
  /* Ocean Gradient Colors */
  --ocean-blue: #4F42B4;
  --liberty: #4E5BAD;
  --blue-yonder: #4C6FA9;
  --rackley: #4B88A0;
  --keppel: #48B8B2;
  --ocean-green: #48B892;

  /* Light Background / Text */
  --body-bg: #E9F8F6;       /* Light aqua-like background */
  --body-color: #2C3E50;    /* Dark slate text */

  /* Navbar / Footer */
  --navbar-bg: #4B88A0;     /* Rackley */
  --navbar-text: #FFFFFF;
  --footer-bg: #E9F8F6;
  --footer-text: #6c757d;

  /* Card Elements */
  --card-bg: #FFFFFF;
  --card-border: #CEE7E5;   /* Subtle aqua border */
  --card-text: #2C3E50;
}

.navbar-custom {
  background-color: var(--navbar-bg);
  color: var(--navbar-text);
}

.footer-custom {
  background-color: var(--footer-bg);
  color: var(--footer-text);
}

.card-custom {
  background-color: var(--card-bg);
  border: 1px solid var(--card-border);
  color: var(--card-text);
  border-radius: 0.75rem;
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.card-custom .card-header {
  background-color: rgba(0,0,0,0.03);
  border-bottom: 1px solid var(--card-border);
  font-weight: 600;
}

.card-custom .card-body {
  padding: 1rem 1.25rem;
}

.card-custom .card-footer {
  background-color: rgba(0,0,0,0.03);
  border-top: 1px solid var(--card-border);
  text-align: right;
}

// File: templates/base.html
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Habit Tracker</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
  <link href="{% static 'css/custom.css' %}" rel="stylesheet">
  <link href="{% static 'css/theme.css' %}" rel="stylesheet">
  
</head>
<body>
  <nav class="navbar navbar-expand-lg navbar-custom">
    <div class="container">
      <a class="navbar-brand" href="{% url 'accounts:main_menu' %}">Habit Tracker</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse justify-content-end" id="navbarSupportedContent">
        {% if request.user.is_authenticated %}
        <div class="d-flex align-items-center">
          <span class="me-3" style="color:var(--navbar-text)">Hello, {{ request.user.full_name }}</span>
          <a class="btn btn-outline-light btn-sm" href="{% url 'accounts:logout' %}">Logout</a>
        </div>
        {% endif %}
      </div>
    </div>
  </nav>
  <div class="container mt-5">
    {% block content %}{% endblock %}
  </div>
  <footer class="footer-custom py-3 mt-auto">
    <div class="container text-center">
      <span>© 2025 Habit Tracker. All rights reserved.</span>
    </div>
  </footer>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="{% static 'js/habit_form.js' %}"></script>
</body>
</html>

// File: templates/change_password.html
{% extends 'base.html' %}
{% block content %}
<h2>Change Password</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Update Password</button>
</form>
{% endblock %}

// File: templates/edit_personal_info.html
{% extends 'base.html' %}
{% load crispy_forms_tags %}

{% block content %}

{% load static %}

<div class="edit-info-container">
  <h2 class="text-center mb-4">Edit Personal Info</h2>
  <div class="card shadow-sm mx-auto info-card p-4">
    <form method="post">
      {% csrf_token %}
      {{ form.phone_number|as_crispy_field }}
      {{ form.age|as_crispy_field }}
      <div class="d-flex justify-content-between mt-4">
        <button type="submit" class="btn btn-primary">Save Changes</button>
        <button type="button" class="btn btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#changePassModal">
          Change Password
        </button>
      </div>
    </form>
  </div>
</div>
<div class="modal fade" id="changePassModal" tabindex="-1">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content bg-card" style="border-radius:1rem;">
      <div class="modal-header border-0">
        <h5 class="modal-title">Change Password</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="px-4 pt-1">
        <div class="progress" style="height: 6px;">
          <div id="wizardProgress" class="progress-bar bg-success" role="progressbar" style="width: 33%;"></div>
        </div>
      </div>
      <div class="modal-body">
        <div id="step1">
          <p class="fw-bold mb-3">How do you want to change your password?</p>
          <div class="list-group">
            <button type="button" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center" id="btnUseOld">
              I know my old password
              <i class="bi bi-arrow-right"></i>
            </button>
            <button type="button" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center" id="btnForgotPw">
              I forgot my old password
              <i class="bi bi-arrow-right"></i>
            </button>
          </div>
        </div>
        <div id="step2Old" class="d-none">
          <label class="form-label">Enter Old Password</label>
          <input type="password" class="form-control mb-3" id="oldPassword" placeholder="Current password">
          <div class="text-danger small" id="oldPwError"></div>
          <div class="d-flex justify-content-between mt-4">
            <button type="button" class="btn btn-secondary" id="backToStep1">Back</button>
            <button type="button" class="btn btn-primary" id="verifyOldBtn">Next</button>
          </div>
        </div>
        <div id="step2Sec" class="d-none">
          <p class="fw-bold">Answer your security questions:</p>
          <div id="securityQuestionsContainer">
            {% for question, answer in security_questions.items %}
            <div class="mb-3">
              <label class="form-label">{{ question }}</label>
              <input type="text" class="form-control secAnswer" data-question="{{ question }}">
            </div>
            {% endfor %}
          </div>
          <div class="text-danger small" id="secError"></div>
          <div class="d-flex justify-content-between mt-4">
            <button type="button" class="btn btn-secondary" id="backToStep1b">Back</button>
            <button type="button" class="btn btn-primary" id="verifySecBtn">Next</button>
          </div>
        </div>
        <div id="step3" class="d-none">
          <form id="newPwForm">
            {% csrf_token %}
            <div id="newPassErrors" class="text-danger small mb-2"></div>
            {{ set_password_form.new_password1.label_tag }}
            {{ set_password_form.new_password1 }}
            <small class="text-muted d-block mb-2" style="font-size: 0.9rem;">
              • At least 8 characters<br>
              • Not entirely numeric<br>
              • Avoid common words or personal info
            </small>
            {{ set_password_form.new_password2.label_tag }}
            {{ set_password_form.new_password2 }}
            <div class="d-flex justify-content-between mt-4">
              <button type="button" class="btn btn-secondary" id="backStep3">Back</button>
              <button type="button" class="btn btn-success" id="btnUpdatePw">Update Password</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<script src="{% static 'js/edit_personal_details.js' %}"></script>
{% endblock %}

// File: templates/form_new_habit.html
{% extends 'base.html' %}
{% load crispy_forms_tags %}
{% load static %}

{% block content %}
  {% include 'habits_templates/habit_main.html' %}
  {% include 'habits_templates/habit_form_prepared.html' %}
  {% include 'habits_templates/habit_form_custom.html' %}
{% endblock %}

// File: templates/habits_templates/habit_form_custom.html
<div id="customFieldsSection" class="extra-fields d-none mt-4">
  <h5>Custom Fields</h5>
  <p class="text-muted small">
    Add your own metrics to track. For example, “Snooze Presses” or “Water at Bedtime.” Select a field type to control how data is tracked.
  </p>
  <div id="customFieldsContainer"></div>
  <button type="button" id="addCustomField" class="btn btn-outline-primary btn-sm mt-2">Add Custom Field</button>
</div>
<div id="guidelines-section" class="mt-5 d-none">
  <h5>User Guidelines & Gamification</h5>
  <p class="mb-4">
    The system will track your progress and award points for daily achievements, which help unlock badges. This gamification approach is designed to keep you motivated and engaged with your habit.
  </p>
</div>
<button id="confirmCustomBtn" type="submit" class="btn btn-success w-100 mt-3 d-none">Confirm (Custom)</button>

// File: templates/habits_templates/habit_form_prepared.html
{% load crispy_forms_tags %}
<form id="habit-form" method="post" class="d-none">
  {% csrf_token %}
  {{ form|crispy }}
  <div id="stopSmokingFields" class="extra-fields d-none mt-4">
    <h5>Additional Details for Stopping Smoking</h5>
    <div class="mb-3">
      <label class="form-label">Cigarettes per Day</label>
      <input type="number" name="cigarettes_per_day" class="form-control" placeholder="e.g., 20">
    </div>
    <div class="mb-3">
      <label class="form-label">Craving Level (1-10)</label>
      <input type="number" name="craving_level" class="form-control" min="1" max="10" placeholder="e.g., 5">
    </div>
    <div class="mb-3">
      <label class="form-label">Planned Quit Date</label>
      <input type="date" name="planned_quit_date" class="form-control">
    </div>
    <div class="mb-3">
      <label class="form-label">Nicotine Replacement Method</label>
      <input type="text" name="nicotine_replacement" class="form-control" placeholder="e.g., Gum">
    </div>
    <div class="mb-3">
      <label class="form-label">Triggers & Coping Strategies</label>
      <textarea name="trigger_coping" class="form-control" rows="3" placeholder="Describe triggers & coping methods"></textarea>
    </div>
  </div>
  <div id="wakeUpEarlyFields" class="extra-fields d-none mt-4">
    <h5>Additional Details for Waking Up Early</h5>
    <div class="mb-3">
      <label class="form-label">Current Wake Time</label>
      <input type="time" name="current_wake_time" class="form-control">
    </div>
    <div class="mb-3">
      <label class="form-label">Desired Wake Time</label>
      <input type="time" name="desired_wake_time" class="form-control">
    </div>
    <div class="mb-3">
      <label class="form-label">Bedtime</label>
      <input type="time" name="bedtime" class="form-control">
    </div>
    <div class="mb-3">
      <label class="form-label">Sleep Quality (1-10)</label>
      <input type="number" name="sleep_quality" class="form-control" min="1" max="10" placeholder="Rate your sleep quality">
    </div>
    <div class="mb-3">
      <label class="form-label">Number of Snoozes</label>
      <input type="number" name="snooze_count" class="form-control" placeholder="e.g., 2">
    </div>
  </div>
  <div id="eatHealthyFields" class="extra-fields d-none mt-4">
    <h5>Additional Details for Eating Healthy</h5>
    <div class="mb-3">
      <label class="form-label">Daily Calorie Target</label>
      <input type="number" name="daily_calorie_target" class="form-control" placeholder="e.g., 2000">
    </div>
    <div class="mb-3">
      <label class="form-label">Fruit & Vegetable Servings</label>
      <input type="number" name="fruit_veg_target" class="form-control" placeholder="e.g., 5">
    </div>
    <div class="mb-3">
      <label class="form-label">Water Intake (glasses/day)</label>
      <input type="number" name="water_intake_goal" class="form-control" placeholder="e.g., 8">
    </div>
    <div class="mb-3">
      <label class="form-label">Junk Food Consumption (optional)</label>
      <input type="number" name="junk_food_consumption" class="form-control" placeholder="e.g., cheat meals per week">
    </div>
  </div>
  <button id="confirmPresetBtn" type="submit" class="btn btn-success w-100 mt-3 d-none">Confirm (Preset)</button>
</form>

// File: templates/habits_templates/habit_main.html
{% load crispy_forms_tags %}
{% load static %}

<div class="text-center mb-5">
  <h2>Create a New Habit</h2>
  <p>Select a ready-made template or build your own:</p>
  <div class="row row-cols-1 row-cols-md-4 g-4 mb-4">
    {% for tpl in templates %}
      <div class="col">
        <div class="card template-card text-center" data-template="{{ tpl.key }}">
          <div class="card-body">
            {% if tpl.key == 'stop_smoking' %}
              <i class="bi bi-x-circle display-4 mb-3"></i>
            {% elif tpl.key == 'eat_healthy' %}
              <i class="bi bi-nut display-4 mb-3"></i>
            {% else %}
              <i class="bi {{ tpl.icon }} display-4 mb-3"></i>
            {% endif %}
            <h5 class="card-title">{{ tpl.label }}</h5>
          </div>
        </div>
      </div>
    {% endfor %}
  </div>
</div>

// File: templates/home.html
{% extends 'base.html' %}
{% block content %}
<div class="text-center">
  <h2 class="mb-4">Welcome, {{ request.user.full_name }}</h2>
  <p class="mb-3">This is your home page.</p>
  <a href="{% url 'accounts:logout' %}" class="btn btn-danger">Logout</a>
</div>
{% endblock %}

// File: templates/index.html
{% extends 'base.html' %}
{% block content %}
<div class="text-center">
  <h2 class="mb-4">Welcome to the Habit Tracker</h2>
  <a href="{% url 'accounts:login' %}" class="btn btn-primary me-2">Login</a>
  <a href="{% url 'accounts:register' %}" class="btn btn-secondary">Sign Up</a>
</div>
{% endblock %}

// File: templates/login.html
{% extends 'base.html' %}
{% load crispy_forms_tags %}

{% block title %}Login{% endblock %}

{% load static %}

{% block content %}

<div class="row justify-content-center mt-5">
  <div class="col-md-5">
    <h2 class="text-center mb-4">Login</h2>
    <form method="post" action="{% url 'accounts:login' %}">
      {% csrf_token %}
      {{ form.non_field_errors }}
      <div class="mb-3">{{ form.username|as_crispy_field }}</div>
      <div class="mb-3">{{ form.password|as_crispy_field }}</div>
      <button type="submit" class="btn btn-primary w-100">Login</button>
    </form>
    <div class="d-flex justify-content-between mt-3">
      <button type="button" class="btn btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#registerModal">Register</button>
      <button type="button" class="btn btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#forgotPassModal">Forgot Password?</button>
    </div>
  </div>
</div>

<div class="modal fade" id="registerModal" tabindex="-1">
  <div class="modal-dialog modal-lg modal-dialog-centered">
    <div class="modal-content rounded-4 shadow-sm">
      <form method="post" action="{% url 'accounts:register' %}">
        {% csrf_token %}
        <div class="modal-header border-bottom-0">
          <h5 class="modal-title mx-auto">Sign Up</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body px-4">
          <div class="row g-3 mb-3">
            <div class="col-md-6">{{ register_form.id_number|as_crispy_field }}</div>
            <div class="col-md-6">{{ register_form.full_name|as_crispy_field }}</div>
            <div class="col-md-6">{{ register_form.phone_number|as_crispy_field }}</div>
            <div class="col-md-6">{{ register_form.age|as_crispy_field }}</div>
            <div class="col-md-6">{{ register_form.password1|as_crispy_field }}</div>
            <div class="col-md-6">{{ register_form.password2|as_crispy_field }}</div>
          </div>
          <hr class="mb-4">
          <div class="row g-3 mb-3 align-items-center">
            <div class="col-md-6">{{ register_form.question1_subquestion }}</div>
            <div class="col-md-6">{{ register_form.answer1|as_crispy_field }}</div>
          </div>
          <div class="row g-3 mb-3 align-items-center">
            <div class="col-md-6">{{ register_form.question2_subquestion }}</div>
            <div class="col-md-6">{{ register_form.answer2|as_crispy_field }}</div>
          </div>
          <div class="row g-3 mb-3 align-items-center">
            <div class="col-md-6">{{ register_form.question3_subquestion }}</div>
            <div class="col-md-6">{{ register_form.answer3|as_crispy_field }}</div>
          </div>
        </div>
        <div class="modal-footer border-top-0 px-4">
          <button type="submit" class="btn btn-success w-100 rounded-pill">Register</button>
        </div>
      </form>
    </div>
  </div>
</div>

<div class="modal fade" id="forgotPassModal" tabindex="-1">
  <div class="modal-dialog modal-lg modal-dialog-centered">
    <div class="modal-content rounded-4 shadow-sm">
      <div class="modal-header border-bottom-0">
        <h5 class="modal-title mx-auto">Reset Password</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body px-4">
        <div id="fpStep1">
          <label class="form-label">Enter Your ID Number</label>
          <input type="text" class="form-control mb-3" id="fpIdNumber" placeholder="ID Number">
          <p class="fw-bold mt-3 mb-2">How do you want to reset?</p>
          <div class="list-group">
            <button type="button" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center" id="fpOldPwBtn">
              I know my old password
              <i class="bi bi-arrow-right"></i>
            </button>
            <button type="button" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center" id="fpSecBtn">
              I forgot my old password
              <i class="bi bi-arrow-right"></i>
            </button>
          </div>
          <div class="text-danger small mt-2" id="fpError1"></div>
        </div>
        <div id="fpStep2Old" class="d-none">
          <label class="form-label">Enter Old Password</label>
          <input type="password" class="form-control mb-3" id="fpOldPassword" placeholder="Current password">
          <div class="text-danger small" id="fpError2"></div>
          <div class="d-flex justify-content-between mt-4">
            <button type="button" class="btn btn-secondary" id="fpBack1">Back</button>
            <button type="button" class="btn btn-primary" id="fpVerifyOldBtn">Next</button>
          </div>
        </div>
        <div id="fpStep2Sec" class="d-none">
          <p class="fw-bold">Answer your security questions:</p>
          <div id="fpQuestionsContainer"></div>
          <div class="text-danger small" id="fpErrorSec"></div>
          <div class="d-flex justify-content-between mt-4">
            <button type="button" class="btn btn-secondary" id="fpBack1b">Back</button>
            <button type="button" class="btn btn-primary" id="fpVerifySecBtn">Next</button>
          </div>
        </div>
        <div id="fpStep3" class="d-none">
          <label class="form-label">New Password</label>
          <input type="password" class="form-control mb-3" id="fpNewPw1" placeholder="New password">
          <label class="form-label">Confirm New Password</label>
          <input type="password" class="form-control mb-3" id="fpNewPw2" placeholder="Confirm password">
          <div class="text-danger small" id="fpError3"></div>
          <div class="d-flex justify-content-between mt-4">
            <button type="button" class="btn btn-secondary" id="fpBack2">Back</button>
            <button type="button" class="btn btn-success" id="fpUpdatePwBtn">Update Password</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script src="{% static 'js/login.js' %}"></script>
{% endblock %}

// File: templates/main_menu.html
{% extends 'base.html' %}
{% block content %}
<div class="dashboard-container">
  <h1 class="dashboard-title">Dashboard</h1>
  <div class="row gx-4 gy-4">
    <div class="col-lg-4">
      <div class="card action-card">
        <div class="list-group list-group-flush">
          <a href="{% url 'habits:form_new_habit' %}" class="list-group-item">Form a New Habit</a>
          <a href="{% url 'habits:ongoing_habit' %}" class="list-group-item">Ongoing Habits</a>
          <a href="{% url 'accounts:edit_personal_info' %}" class="list-group-item">Edit Personal Info</a>
          <a href="{% url 'accounts:logout' %}" class="list-group-item logout-link">Logout</a>
        </div>
      </div>
    </div>
    <div class="col-lg-4">
      <div class="card info-card">
        <img src="/static/images/insights.jpg" class="card-img-top" alt="Insights">
        <div class="card-body">
          <h3 class="card-title">Insights</h3>
          <p class="card-text">
            Monitor your streaks, points, and progress over time. Explore interactive charts and graphs that visualize your habit journey.
          </p>
        </div>
      </div>
    </div>
    <div class="col-lg-4">
      <div class="card info-card">
        <img src="/static/images/habit-news.jpg" class="card-img-top" alt="Habit News">
        <div class="card-body">
          <h3 class="card-title">Habit News</h3>
          <ul id="news-list" class="list-unstyled">
            <li>Loading latest habit tips...</li>
          </ul>
        </div>
      </div>
    </div>
  </div>
  <div class="row gx-4 gy-4 mt-4">
    <div class="col-lg-6">
      <div class="card info-card">
        <img src="/static/images/motivation.jpg" class="card-img-top" alt="Daily Motivation">
        <div class="card-body">
          <h3 class="card-title">Daily Motivation</h3>
          <p class="card-text">
            Kickstart your day with a burst of inspiration. Let today’s motivational quote keep you on track.
          </p>
          <blockquote class="blockquote">
            <p id="daily-quote">"Loading motivational quote..."</p>
          </blockquote>
        </div>
      </div>
    </div>
    <div class="col-lg-6">
      <div class="card info-card">
        <img src="/static/images/achievements.jpg" class="card-img-top" alt="Achievements">
        <div class="card-body">
          <h3 class="card-title">Achievements</h3>
          <p class="card-text">
            Celebrate your progress with badges and points. Track your journey to achieving Silver, Gold, or Platinum status.
          </p>
          <a href="{% url 'habits:ongoing_habit' %}" class="btn btn-primary">View Achievements</a>
        </div>
      </div>
    </div>
  </div>
</div>
<script>
fetch('https://api.sampleapis.com/futurama/quotes')
  .then(r => r.json())
  .then(d => {
    const e = document.getElementById('news-list')
    e.innerHTML = d.slice(0,3).map(q => '<li>• ' + q.quote + '</li>').join('')
  })
  .catch(() => {
    document.getElementById('news-list').innerHTML = '<li>Unable to load news.</li>'
  })
fetch('https://api.quotable.io/random')
  .then(r => r.json())
  .then(d => {
    document.getElementById('daily-quote').textContent = '"' + d.content + '" — ' + d.author
  })
  .catch(() => {
    document.getElementById('daily-quote').textContent = 'Stay motivated and keep pushing forward!'
  })
</script>
{% endblock %}

// File: templates/ongoing_habit.html
{% extends 'base.html' %}
{% block content %}
<div class="container my-4">
  <h2 class="text-center fw-bold mb-4">Ongoing Habits</h2>
  {% if habits %}
    <div class="row row-cols-1 row-cols-md-2 g-3">
      {% for habit in habits %}
        <div class="col">
          <div class="card border-primary shadow-sm h-100">
            <div class="card-body">
              <h5 class="card-title">{{ habit.name }}</h5>
              <p class="card-text mb-1">Created: {{ habit.created_at|date:"Y-m-d" }}</p>
              <p class="card-text mb-1">Timeline: {{ habit.get_timeline_display }}</p>
              <p class="card-text mb-1">Reminder: {{ habit.get_motivational_reminder_display }}</p>
              <p class="card-text mb-1">Streak: {{ habit.streak }}</p>
              <p class="card-text mb-1">Points: {{ habit.points }}</p>
            </div>
            <div class="card-footer bg-transparent">
              <div class="d-flex justify-content-between">
                <a href="{% url 'habits:track_habit_detail' habit.id %}" class="btn btn-sm btn-primary">Track Habit</a>
                <a href="{% url 'habits:abort_process' habit.id %}" class="btn btn-sm btn-danger">Abort</a>
                <a href="{% url 'habits:insert_data' habit.id %}" class="btn btn-sm btn-success">Insert Data</a>
              </div>
            </div>
          </div>
        </div>
      {% endfor %}
    </div>
  {% else %}
    <div class="text-center">
      <p>No habits found. <a href="{% url 'habits:form_new_habit' %}">Create one?</a></p>
    </div>
  {% endif %}
  <div class="mt-4 text-center">
    <a href="{% url 'accounts:main_menu' %}" class="btn btn-secondary px-2 py-2 rounded-3 shadow-sm">
      <i class="bi bi-arrow-left-circle me-2"></i> Back to Main Menu
    </a>
  </div>
</div>
{% endblock %}

// File: templates/track_habits/insert_data.html
<!-- insert_data.html -->
{% extends 'base.html' %}
{% block content %}
<div class="container my-4">
  <h2 class="text-center fw-bold mb-4">Insert Data for Habit: {{ habit.name }}</h2>
  <div class="card shadow-sm rounded-4 mb-4">
    <div class="card-header bg-success text-white">
      Daily Data Entry ({% now "Y-m-d" %})
    </div>
    <div class="card-body">
      <form method="post">
        {% csrf_token %}
        <div class="row g-3">
          {% for field in form %}
          <div class="col-md-6">
            <div class="form-group">
              {{ field.label_tag }}
              {{ field }}
              {% if field.errors %}
              <div class="text-danger">{{ field.errors }}</div>
              {% endif %}
            </div>
          </div>
          {% endfor %}
        </div>
        <div class="mt-4 text-center">
          <button type="submit" class="btn btn-success px-4 py-2 rounded-3 fw-semibold shadow-sm">Insert Data</button>
        </div>
      </form>
    </div>
  </div>
  <div class="mb-4">
    <h4 class="mb-3">Previous Records</h4>
    {% if records %}
    <ul class="list-group">
      {% for record in records %}
      <li class="list-group-item d-flex justify-content-between align-items-center">
        <span>{{ record.date|date:"Y-m-d" }}</span>
        <span>{{ record.data }}</span>
      </li>
      {% endfor %}
    </ul>
    {% else %}
    <p class="text-center">No records found yet.</p>
    {% endif %}
  </div>
  <div class="text-center">
    <a href="{% url 'habits:track_habit_detail' habit.id %}" class="btn btn-secondary px-4 py-2 rounded-3 shadow-sm">
      <i class="bi bi-arrow-left-circle me-2"></i> Back to Habit Details
    </a>
  </div>
</div>
{% endblock %}

// File: templates/track_habits/track_habit_detail.html
{% extends 'base.html' %}
{% block content %}
<div class="container">
    <div class="d-flex justify-content-center align-items-center mb-4">
        <h2 class="fw-bold mb-0 me-2">Track Habit:</h2>
        <h2 class="text-primary fw-bold mb-0">{{ habit.name }}</h2>
    </div>
    <div class="row row-cols-1 row-cols-md-2 g-4 align-items-stretch">
        <div class="col d-flex">
            <div class="card shadow-sm border-0 rounded-4 w-100">
                <div class="card-body text-center">
                    <div class="mb-2">
                        <i class="bi bi-fire text-danger fs-2"></i>
                    </div>
                    <h5 class="card-title fw-semibold">View Streaks</h5>
                    <p class="card-text display-6 fw-bold text-danger">{{ streak }}</p>
                    <small class="text-muted">Current Streak (days)</small>
                </div>
            </div>
        </div>
        <div class="col d-flex">
            <div class="card shadow-sm border-0 rounded-4 w-100">
                <div class="card-body text-center">
                    <div class="mb-2">
                        <i class="bi bi-trophy-fill text-success fs-2"></i>
                    </div>
                    <h5 class="card-title fw-semibold">View Points</h5>
                    <p class="card-text display-6 fw-bold text-success">{{ total_points }}</p>
                    {% if badge %}
                        <small class="text-muted">Badge Earned: <span class="fw-bold">{{ badge }}</span></small>
                    {% else %}
                        <small class="text-muted">No Badge Earned Yet</small>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
    <div class="row row-cols-1 row-cols-md-2 g-4 align-items-stretch mt-3">
        <div class="col d-flex">
            <div class="card shadow-sm border-0 rounded-4 w-100">
                <div class="card-body text-center">
                    <div class="mb-2">
                        <i class="bi bi-hourglass-split text-warning fs-2"></i>
                    </div>
                    <h5 class="card-title fw-semibold">Upcoming Challenges</h5>
                    <p class="display-6 fw-bold text-warning">{{ days_remaining }}</p>
                    <small class="text-muted">Days Remaining</small>
                    <p class="mt-2">
                        Next Badge:
                        <span class="fw-bold text-primary">
                            {% if total_points < 75 %}
                                Silver (75 pts)
                            {% elif total_points < 150 %}
                                Gold (150 pts)
                            {% else %}
                                Platinum (Achieved)
                            {% endif %}
                        </span>
                    </p>
                </div>
            </div>
        </div>
        <div class="col d-flex">
            <div class="card shadow-sm border-0 rounded-4 w-100">
                <div class="card-body">
                    <div class="d-flex align-items-center mb-2">
                        <i class="bi bi-graph-up-arrow text-info fs-4 me-2"></i>
                        <h5 class="card-title fw-semibold mb-0">View Insights</h5>
                    </div>
                    <div class="position-relative" style="height:250px;">
                        <canvas id="habitChart"></canvas>
                    </div>
                    <div class="mt-3">
                        <small class="text-muted">
                            Committed Days: <span class="fw-bold">{{ committed_days }}</span> | Days Left: <span class="fw-bold">{{ days_remaining }}</span>
                        </small>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row row-cols-1 row-cols-md-2 g-4 align-items-stretch mt-3">
        <div class="col d-flex">
            <div class="card shadow-sm border-0 rounded-4 w-100">
                <div class="card-body">
                    <div class="d-flex align-items-center mb-2">
                        <i class="bi bi-alarm text-danger fs-4 me-2"></i>
                        <h5 class="card-title fw-semibold mb-0">Update Reminder</h5>
                    </div>
                    <form method="post">
                        {% csrf_token %}
                        <div class="form-group mb-3">
                            <label for="reminder_frequency" class="fw-semibold">Reminder Frequency:</label>
                            <select name="reminder_frequency" id="reminder_frequency" class="form-control rounded-3">
                                <option value="daily" {% if habit.motivational_reminder == 'daily' %}selected{% endif %}>Daily</option>
                                <option value="weekly" {% if habit.motivational_reminder == 'weekly' %}selected{% endif %}>Weekly</option>
                            </select>
                        </div>
                        <button type="submit" class="btn btn-outline-danger w-100 rounded-3 fw-semibold shadow-sm">Update Reminder</button>
                    </form>
                </div>
            </div>
        </div>
        <div class="col d-flex">
            <div class="card shadow-sm border-0 rounded-4 w-100">
                <div class="card-body">
                    <div class="d-flex align-items-center mb-2">
                        <i class="bi bi-flag-fill text-primary fs-4 me-2"></i>
                        <h5 class="card-title fw-semibold mb-0">Update Goal Timeline</h5>
                    </div>
                    <form method="post">
                        {% csrf_token %}
                        <div class="form-group mb-3">
                            <label for="timeline" class="fw-semibold">Goal Duration:</label>
                            <select name="timeline" id="timeline" class="form-control rounded-3">
                                <option value="1" {% if habit.timeline == '1' %}selected{% endif %}>1 Month</option>
                                <option value="2" {% if habit.timeline == '2' %}selected{% endif %}>2 Months</option>
                            </select>
                        </div>
                        <button type="submit" class="btn btn-outline-primary w-100 rounded-3 fw-semibold shadow-sm">Update Goal</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div class="text-center mt-4">
        <a href="{% url 'habits:ongoing_habit' %}" class="btn btn-secondary px-4 py-2 rounded-3 shadow-sm"><i class="bi bi-arrow-left-circle me-2"></i>Back</a>
    </div>
</div>
<script>
document.addEventListener("DOMContentLoaded", function () {
    var ctx = document.getElementById('habitChart').getContext('2d');
    var habitChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: [{% for record in habit_records %}"{{ record.date }}",{% endfor %}],
            datasets: [{
                label: 'Progress',
                data: [{% for record in habit_records %}{{ record.data|length }},{% endfor %}],
                borderColor: '#0d6efd',
                borderWidth: 3,
                fill: false
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: { stepSize: 1 }
                }
            }
        }
    });
});
</script>
{% endblock %}

